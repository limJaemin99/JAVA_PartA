day02		(04.20)<그림 참고>

데이터 형식에 따른 변수 선언
# 선언이란?
	- 변수가 저장할 데이터의 형식과 이름을 정하는 것
>> 선언 방법
	1) 선언과 초기값 저장	// int age = 26;
	2) 필요할때 값 저장
	   int age;
		  .
		  .
		  .
	  age = 26;
-----------------------------------------------------------------------------------------------
# 비트(bit) 와 바이트(byte)
	- 메모리에 데이터를 저장할 때 모든 값은 0과 1로만 한다. (2진법, binary)
	- 정수, 실수, 문자열, 문자와 같은 데이터가 모두 2진법으로 변환된다.
	- 비트는 0 또는 1을 표시하는 한 자리
	
	- 8 비트 = 1 바이트 (8bit = 1byte)
	- 1024    바이트 = 1 킬로바이트
	- 1024 킬로바이트 = 1 메가바이트
	- 1024 메가바이트 = 1 기가바이트
	- 1024 기가바이트 = 1 테라바이트
	- 1024 테라바이트 = 1 페타바이트
	
	원시형 데이터타입은 각각 다른 메모리 바이트를 할당받게 된다.
-----------------------------------------------------------------------------------------------
# 데이터의 형식과 크기
	    			▶ 기본형								▶ 참조형
	    			
            정수		byte	1byte				 문자열	 String	 ???
            		short	2byte
            		int		4byte
            		long	8byte
            		
            실수		float	4byte
            		double	8byte
            		
            문자형	char	2byte
            
            논리형	boolean	1byte
        
정수 8byte long 과 실수 8byte double은 메모리 크기는 같지만 표현 형식이 다르다.
double 형식이 훨씬 매우 큰 범위의 값을 표현한다.
-----------------------------------------------------------------------------------------------
# 캐스팅 (형변환) : 데이터 형식 변환을 말한다.
▶ 자동 캐스팅 (자동으로 데이터 형식이 변환된다)
	ex) int 값을 double 변수로 저장할 때 >> double weight = 57;			(O)
		반대로 double 값을 int 변수로 저장하는 것은 오류 >> int age = 34.2;	(X)

▶ 강제 캐스팅 (직접적인 명령으로 데이터 형식이 변환된다)
	ex) int age = 34.2; 와 같은 데이터 변환을 강제로 한다. 이런 경우 데이터가 손실될 수 있다.
-----------------------------------------------------------------------------------------------
★★★★★DAY2 총정리★★★★★
# 리터럴과 데이터 형식
리터럴은 값 그 자체, 데이터 형식에 따라 표시하는 방법이 다르다.
	- 1234는 int 정수, 메모리 크기는 4byte
	- 1234L은 long 정수, 메모리 크기는 8byte
	- 3.1419는 double 실수, 메모리 크기는 8byte (값의 표현범위, 소수점이하 자리수 차이)		>> 16자리
	- 3.1419f는 float실수, 메모리 크기는 4byte (값의 표현범위, 소수점이하 자리수 차이)		>> 7자리
	- 'a' 또는 '6'은 char 문자 1개, 메모리 크기는 2byte
	- true / false 2가지로 표시하는 boolean 논리형, 메모리 크기는 1byte
	- 원시타입은 아니지만 다른 프로그래밍 언어에서는 기본형식으로 사용하는 "java","1234"는 문자열,
	  메모리크기는 문자열 안의 문자 갯수에 따라 할당.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

